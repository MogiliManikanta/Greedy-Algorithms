Given an array A[]. The task is to find the maximum product possible with the subset of elements present in the array. The maximum product can be a single element also.
Since the product can be large, return it modulo (109 + 7).

Example 1:

Input:
A[] = {-1, -1, -2, 4, 3}
Output: 24
Explanation: Maximum product will be ( -2 * -1 * 4 * 3 ) = 24

Example 2:

Input:
A[] = {-1, 0}
Output: 0
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function findMaxProduct() which takes an array of size N and returns an integer.
 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

 

Constraints:
1 <= N <= 2 * 104
-10 <= A[i] <= 10

//{ Driver Code Starts
import java.io.*;
import java.util.*;


class IntArray
{
    public static int[] input(BufferedReader br, int n) throws IOException
    {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = Integer.parseInt(s[i]);
        
        return a;
    }
    
    public static void print(int[] a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
    
    public static void print(ArrayList<Integer> a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine().trim());
        while(t-- > 0){
            
            int n; 
            n = Integer.parseInt(br.readLine().trim());
            
            
            int[] arr = IntArray.input(br, n);
            
            Solution obj = new Solution();
            int res = obj.findMaxProduct(n, arr);
            
            System.out.println(res);
            
        }
    }
}

// } Driver Code Ends


class Solution {
    public static int findMaxProduct(int n, int[] arr) {
        
       if( arr.length == 1){
           return arr[0];
       }
        int mod=1000000007;
       int negProduct = 1;
       int zero = Integer.MIN_VALUE;
       int posProduct = Integer.MIN_VALUE;
       
       int neg_count=0;
       int neg_min=Integer.MIN_VALUE;
       
       for( int i=0 ; i<arr.length ; i++ ){
           
           if( arr[i] == 0 ){
               zero = 0;
               continue;
           }
           
           if( arr[i] < 0 ){
               neg_count += 1;
               neg_min = Math.max( neg_min , arr[i] );
               
               long p = (long)negProduct*arr[i];
               negProduct = (int) (p % mod);
               
               continue;
           }
           
           if( posProduct == Integer.MIN_VALUE ){
               posProduct = arr[i];
           }else{
               long p = (long)posProduct*arr[i];
               posProduct =( int) (p % mod) ;
           }
       }
       
       
       
       if( neg_count == 0 ){ // means there is no negative Integer..either 0 or positive
            return Math.max( posProduct , zero );
       }
       
       if( neg_count == 1 ){ // if there is only one negative integer, then we cannot add this to ur product
            return Math.max( negProduct , Math.max( posProduct , zero ) );
       }
       
       // if we are reaching here means there are surely 2 or more than negaitive integer
       
       if( posProduct == Integer.MIN_VALUE){
           posProduct = 1;
       }
       
       if( neg_count%2 != 0){ // means there is one extra negative..if we remove that then negative product would be positive
            negProduct = (negProduct/neg_min)%mod;
       }
       
       long product = (long)negProduct*posProduct;
       return (int)(product%mod);
        
    }
}
  
